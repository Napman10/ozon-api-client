// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.8
// Revision: 3d844c8ecc59661ed7aa17bfd65727bc06a60ad8
// Build Date: 2023-09-18T14:55:21Z
// Built By: goreleaser

package v1

import (
	"fmt"
	"strings"
)

const (
	// ListResponseResultFirstMileTypeFirstMileTypeDropOff is a ListResponseResultFirstMileTypeFirstMileType of type DropOff.
	ListResponseResultFirstMileTypeFirstMileTypeDropOff ListResponseResultFirstMileTypeFirstMileType = iota + 1
	// ListResponseResultFirstMileTypeFirstMileTypePickup is a ListResponseResultFirstMileTypeFirstMileType of type Pickup.
	ListResponseResultFirstMileTypeFirstMileTypePickup
	// ListResponseResultFirstMileTypeFirstMileTypeDIRECTIONRISE is a ListResponseResultFirstMileTypeFirstMileType of type DIRECTION_RISE.
	ListResponseResultFirstMileTypeFirstMileTypeDIRECTIONRISE
	// ListResponseResultFirstMileTypeFirstMileTypeDIRECTIONFALL is a ListResponseResultFirstMileTypeFirstMileType of type DIRECTION_FALL.
	ListResponseResultFirstMileTypeFirstMileTypeDIRECTIONFALL
)

var ErrInvalidListResponseResultFirstMileTypeFirstMileType = fmt.Errorf("not a valid ListResponseResultFirstMileTypeFirstMileType, try [%s]", strings.Join(_ListResponseResultFirstMileTypeFirstMileTypeNames, ", "))

const _ListResponseResultFirstMileTypeFirstMileTypeName = "DropOffPickupDIRECTION_RISEDIRECTION_FALL"

var _ListResponseResultFirstMileTypeFirstMileTypeNames = []string{
	_ListResponseResultFirstMileTypeFirstMileTypeName[0:7],
	_ListResponseResultFirstMileTypeFirstMileTypeName[7:13],
	_ListResponseResultFirstMileTypeFirstMileTypeName[13:27],
	_ListResponseResultFirstMileTypeFirstMileTypeName[27:41],
}

// ListResponseResultFirstMileTypeFirstMileTypeNames returns a list of possible string values of ListResponseResultFirstMileTypeFirstMileType.
func ListResponseResultFirstMileTypeFirstMileTypeNames() []string {
	tmp := make([]string, len(_ListResponseResultFirstMileTypeFirstMileTypeNames))
	copy(tmp, _ListResponseResultFirstMileTypeFirstMileTypeNames)
	return tmp
}

var _ListResponseResultFirstMileTypeFirstMileTypeMap = map[ListResponseResultFirstMileTypeFirstMileType]string{
	ListResponseResultFirstMileTypeFirstMileTypeDropOff:       _ListResponseResultFirstMileTypeFirstMileTypeName[0:7],
	ListResponseResultFirstMileTypeFirstMileTypePickup:        _ListResponseResultFirstMileTypeFirstMileTypeName[7:13],
	ListResponseResultFirstMileTypeFirstMileTypeDIRECTIONRISE: _ListResponseResultFirstMileTypeFirstMileTypeName[13:27],
	ListResponseResultFirstMileTypeFirstMileTypeDIRECTIONFALL: _ListResponseResultFirstMileTypeFirstMileTypeName[27:41],
}

// String implements the Stringer interface.
func (x ListResponseResultFirstMileTypeFirstMileType) String() string {
	if str, ok := _ListResponseResultFirstMileTypeFirstMileTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ListResponseResultFirstMileTypeFirstMileType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ListResponseResultFirstMileTypeFirstMileType) IsValid() bool {
	_, ok := _ListResponseResultFirstMileTypeFirstMileTypeMap[x]
	return ok
}

var _ListResponseResultFirstMileTypeFirstMileTypeValue = map[string]ListResponseResultFirstMileTypeFirstMileType{
	_ListResponseResultFirstMileTypeFirstMileTypeName[0:7]:   ListResponseResultFirstMileTypeFirstMileTypeDropOff,
	_ListResponseResultFirstMileTypeFirstMileTypeName[7:13]:  ListResponseResultFirstMileTypeFirstMileTypePickup,
	_ListResponseResultFirstMileTypeFirstMileTypeName[13:27]: ListResponseResultFirstMileTypeFirstMileTypeDIRECTIONRISE,
	_ListResponseResultFirstMileTypeFirstMileTypeName[27:41]: ListResponseResultFirstMileTypeFirstMileTypeDIRECTIONFALL,
}

// ParseListResponseResultFirstMileTypeFirstMileType attempts to convert a string to a ListResponseResultFirstMileTypeFirstMileType.
func ParseListResponseResultFirstMileTypeFirstMileType(name string) (ListResponseResultFirstMileTypeFirstMileType, error) {
	if x, ok := _ListResponseResultFirstMileTypeFirstMileTypeValue[name]; ok {
		return x, nil
	}
	return ListResponseResultFirstMileTypeFirstMileType(0), fmt.Errorf("%s is %w", name, ErrInvalidListResponseResultFirstMileTypeFirstMileType)
}

// MarshalText implements the text marshaller method.
func (x ListResponseResultFirstMileTypeFirstMileType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ListResponseResultFirstMileTypeFirstMileType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseListResponseResultFirstMileTypeFirstMileType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// ListResponseResultStatusNew is a ListResponseResultStatus of type New.
	ListResponseResultStatusNew ListResponseResultStatus = iota + 1
	// ListResponseResultStatusCreated is a ListResponseResultStatus of type Created.
	ListResponseResultStatusCreated
	// ListResponseResultStatusDisabled is a ListResponseResultStatus of type Disabled.
	ListResponseResultStatusDisabled
	// ListResponseResultStatusBlocked is a ListResponseResultStatus of type Blocked.
	ListResponseResultStatusBlocked
	// ListResponseResultStatusDisabledDueToLimit is a ListResponseResultStatus of type Disabled_due_to_limit.
	ListResponseResultStatusDisabledDueToLimit
	// ListResponseResultStatusError is a ListResponseResultStatus of type Error.
	ListResponseResultStatusError
)

var ErrInvalidListResponseResultStatus = fmt.Errorf("not a valid ListResponseResultStatus, try [%s]", strings.Join(_ListResponseResultStatusNames, ", "))

const _ListResponseResultStatusName = "newcreateddisabledblockeddisabled_due_to_limiterror"

var _ListResponseResultStatusNames = []string{
	_ListResponseResultStatusName[0:3],
	_ListResponseResultStatusName[3:10],
	_ListResponseResultStatusName[10:18],
	_ListResponseResultStatusName[18:25],
	_ListResponseResultStatusName[25:46],
	_ListResponseResultStatusName[46:51],
}

// ListResponseResultStatusNames returns a list of possible string values of ListResponseResultStatus.
func ListResponseResultStatusNames() []string {
	tmp := make([]string, len(_ListResponseResultStatusNames))
	copy(tmp, _ListResponseResultStatusNames)
	return tmp
}

var _ListResponseResultStatusMap = map[ListResponseResultStatus]string{
	ListResponseResultStatusNew:                _ListResponseResultStatusName[0:3],
	ListResponseResultStatusCreated:            _ListResponseResultStatusName[3:10],
	ListResponseResultStatusDisabled:           _ListResponseResultStatusName[10:18],
	ListResponseResultStatusBlocked:            _ListResponseResultStatusName[18:25],
	ListResponseResultStatusDisabledDueToLimit: _ListResponseResultStatusName[25:46],
	ListResponseResultStatusError:              _ListResponseResultStatusName[46:51],
}

// String implements the Stringer interface.
func (x ListResponseResultStatus) String() string {
	if str, ok := _ListResponseResultStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ListResponseResultStatus(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ListResponseResultStatus) IsValid() bool {
	_, ok := _ListResponseResultStatusMap[x]
	return ok
}

var _ListResponseResultStatusValue = map[string]ListResponseResultStatus{
	_ListResponseResultStatusName[0:3]:   ListResponseResultStatusNew,
	_ListResponseResultStatusName[3:10]:  ListResponseResultStatusCreated,
	_ListResponseResultStatusName[10:18]: ListResponseResultStatusDisabled,
	_ListResponseResultStatusName[18:25]: ListResponseResultStatusBlocked,
	_ListResponseResultStatusName[25:46]: ListResponseResultStatusDisabledDueToLimit,
	_ListResponseResultStatusName[46:51]: ListResponseResultStatusError,
}

// ParseListResponseResultStatus attempts to convert a string to a ListResponseResultStatus.
func ParseListResponseResultStatus(name string) (ListResponseResultStatus, error) {
	if x, ok := _ListResponseResultStatusValue[name]; ok {
		return x, nil
	}
	return ListResponseResultStatus(0), fmt.Errorf("%s is %w", name, ErrInvalidListResponseResultStatus)
}

// MarshalText implements the text marshaller method.
func (x ListResponseResultStatus) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ListResponseResultStatus) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseListResponseResultStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
