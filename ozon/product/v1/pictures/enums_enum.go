// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.5
// Revision: b9e7d1ac24b2b7f6a5b451fa3d21706ffd8d79e2
// Build Date: 2023-01-30T01:49:43Z
// Built By: goreleaser

package pictures

import (
	"fmt"
	"strings"
)

const (
	// ImportResponseResultPictureStateImported is a ImportResponseResultPictureState of type Imported.
	ImportResponseResultPictureStateImported ImportResponseResultPictureState = iota + 1
	// ImportResponseResultPictureStateUploaded is a ImportResponseResultPictureState of type Uploaded.
	ImportResponseResultPictureStateUploaded
	// ImportResponseResultPictureStateFailed is a ImportResponseResultPictureState of type Failed.
	ImportResponseResultPictureStateFailed
)

var ErrInvalidImportResponseResultPictureState = fmt.Errorf("not a valid ImportResponseResultPictureState, try [%s]", strings.Join(_ImportResponseResultPictureStateNames, ", "))

const _ImportResponseResultPictureStateName = "importeduploadedfailed"

var _ImportResponseResultPictureStateNames = []string{
	_ImportResponseResultPictureStateName[0:8],
	_ImportResponseResultPictureStateName[8:16],
	_ImportResponseResultPictureStateName[16:22],
}

// ImportResponseResultPictureStateNames returns a list of possible string values of ImportResponseResultPictureState.
func ImportResponseResultPictureStateNames() []string {
	tmp := make([]string, len(_ImportResponseResultPictureStateNames))
	copy(tmp, _ImportResponseResultPictureStateNames)
	return tmp
}

var _ImportResponseResultPictureStateMap = map[ImportResponseResultPictureState]string{
	ImportResponseResultPictureStateImported: _ImportResponseResultPictureStateName[0:8],
	ImportResponseResultPictureStateUploaded: _ImportResponseResultPictureStateName[8:16],
	ImportResponseResultPictureStateFailed:   _ImportResponseResultPictureStateName[16:22],
}

// String implements the Stringer interface.
func (x ImportResponseResultPictureState) String() string {
	if str, ok := _ImportResponseResultPictureStateMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ImportResponseResultPictureState(%d)", x)
}

var _ImportResponseResultPictureStateValue = map[string]ImportResponseResultPictureState{
	_ImportResponseResultPictureStateName[0:8]:   ImportResponseResultPictureStateImported,
	_ImportResponseResultPictureStateName[8:16]:  ImportResponseResultPictureStateUploaded,
	_ImportResponseResultPictureStateName[16:22]: ImportResponseResultPictureStateFailed,
}

// ParseImportResponseResultPictureState attempts to convert a string to a ImportResponseResultPictureState.
func ParseImportResponseResultPictureState(name string) (ImportResponseResultPictureState, error) {
	if x, ok := _ImportResponseResultPictureStateValue[name]; ok {
		return x, nil
	}
	return ImportResponseResultPictureState(0), fmt.Errorf("%s is %w", name, ErrInvalidImportResponseResultPictureState)
}

// MarshalText implements the text marshaller method.
func (x ImportResponseResultPictureState) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ImportResponseResultPictureState) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseImportResponseResultPictureState(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// InfoResponseResultPictureStateImported is a InfoResponseResultPictureState of type Imported.
	InfoResponseResultPictureStateImported InfoResponseResultPictureState = iota + 1
	// InfoResponseResultPictureStateUploaded is a InfoResponseResultPictureState of type Uploaded.
	InfoResponseResultPictureStateUploaded
	// InfoResponseResultPictureStateFailed is a InfoResponseResultPictureState of type Failed.
	InfoResponseResultPictureStateFailed
)

var ErrInvalidInfoResponseResultPictureState = fmt.Errorf("not a valid InfoResponseResultPictureState, try [%s]", strings.Join(_InfoResponseResultPictureStateNames, ", "))

const _InfoResponseResultPictureStateName = "importeduploadedfailed"

var _InfoResponseResultPictureStateNames = []string{
	_InfoResponseResultPictureStateName[0:8],
	_InfoResponseResultPictureStateName[8:16],
	_InfoResponseResultPictureStateName[16:22],
}

// InfoResponseResultPictureStateNames returns a list of possible string values of InfoResponseResultPictureState.
func InfoResponseResultPictureStateNames() []string {
	tmp := make([]string, len(_InfoResponseResultPictureStateNames))
	copy(tmp, _InfoResponseResultPictureStateNames)
	return tmp
}

var _InfoResponseResultPictureStateMap = map[InfoResponseResultPictureState]string{
	InfoResponseResultPictureStateImported: _InfoResponseResultPictureStateName[0:8],
	InfoResponseResultPictureStateUploaded: _InfoResponseResultPictureStateName[8:16],
	InfoResponseResultPictureStateFailed:   _InfoResponseResultPictureStateName[16:22],
}

// String implements the Stringer interface.
func (x InfoResponseResultPictureState) String() string {
	if str, ok := _InfoResponseResultPictureStateMap[x]; ok {
		return str
	}
	return fmt.Sprintf("InfoResponseResultPictureState(%d)", x)
}

var _InfoResponseResultPictureStateValue = map[string]InfoResponseResultPictureState{
	_InfoResponseResultPictureStateName[0:8]:   InfoResponseResultPictureStateImported,
	_InfoResponseResultPictureStateName[8:16]:  InfoResponseResultPictureStateUploaded,
	_InfoResponseResultPictureStateName[16:22]: InfoResponseResultPictureStateFailed,
}

// ParseInfoResponseResultPictureState attempts to convert a string to a InfoResponseResultPictureState.
func ParseInfoResponseResultPictureState(name string) (InfoResponseResultPictureState, error) {
	if x, ok := _InfoResponseResultPictureStateValue[name]; ok {
		return x, nil
	}
	return InfoResponseResultPictureState(0), fmt.Errorf("%s is %w", name, ErrInvalidInfoResponseResultPictureState)
}

// MarshalText implements the text marshaller method.
func (x InfoResponseResultPictureState) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *InfoResponseResultPictureState) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseInfoResponseResultPictureState(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
