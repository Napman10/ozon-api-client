// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.5
// Revision: b9e7d1ac24b2b7f6a5b451fa3d21706ffd8d79e2
// Build Date: 2023-01-30T01:49:43Z
// Built By: goreleaser

package _import

import (
	"fmt"
	"strings"
)

const (
	// InfoResponseResultItemStatusPending is a InfoResponseResultItemStatus of type Pending.
	InfoResponseResultItemStatusPending InfoResponseResultItemStatus = iota + 1
	// InfoResponseResultItemStatusImported is a InfoResponseResultItemStatus of type Imported.
	InfoResponseResultItemStatusImported
	// InfoResponseResultItemStatusFailed is a InfoResponseResultItemStatus of type Failed.
	InfoResponseResultItemStatusFailed
)

var ErrInvalidInfoResponseResultItemStatus = fmt.Errorf("not a valid InfoResponseResultItemStatus, try [%s]", strings.Join(_InfoResponseResultItemStatusNames, ", "))

const _InfoResponseResultItemStatusName = "pendingimportedfailed"

var _InfoResponseResultItemStatusNames = []string{
	_InfoResponseResultItemStatusName[0:7],
	_InfoResponseResultItemStatusName[7:15],
	_InfoResponseResultItemStatusName[15:21],
}

// InfoResponseResultItemStatusNames returns a list of possible string values of InfoResponseResultItemStatus.
func InfoResponseResultItemStatusNames() []string {
	tmp := make([]string, len(_InfoResponseResultItemStatusNames))
	copy(tmp, _InfoResponseResultItemStatusNames)
	return tmp
}

var _InfoResponseResultItemStatusMap = map[InfoResponseResultItemStatus]string{
	InfoResponseResultItemStatusPending:  _InfoResponseResultItemStatusName[0:7],
	InfoResponseResultItemStatusImported: _InfoResponseResultItemStatusName[7:15],
	InfoResponseResultItemStatusFailed:   _InfoResponseResultItemStatusName[15:21],
}

// String implements the Stringer interface.
func (x InfoResponseResultItemStatus) String() string {
	if str, ok := _InfoResponseResultItemStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("InfoResponseResultItemStatus(%d)", x)
}

var _InfoResponseResultItemStatusValue = map[string]InfoResponseResultItemStatus{
	_InfoResponseResultItemStatusName[0:7]:   InfoResponseResultItemStatusPending,
	_InfoResponseResultItemStatusName[7:15]:  InfoResponseResultItemStatusImported,
	_InfoResponseResultItemStatusName[15:21]: InfoResponseResultItemStatusFailed,
}

// ParseInfoResponseResultItemStatus attempts to convert a string to a InfoResponseResultItemStatus.
func ParseInfoResponseResultItemStatus(name string) (InfoResponseResultItemStatus, error) {
	if x, ok := _InfoResponseResultItemStatusValue[name]; ok {
		return x, nil
	}
	return InfoResponseResultItemStatus(0), fmt.Errorf("%s is %w", name, ErrInvalidInfoResponseResultItemStatus)
}

// MarshalText implements the text marshaller method.
func (x InfoResponseResultItemStatus) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *InfoResponseResultItemStatus) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseInfoResponseResultItemStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
